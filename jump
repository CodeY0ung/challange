문제 설명
효진이는 멀리 뛰기를 연습하고 있습니다. 효진이는 한번에 1칸, 또는 2칸을 뛸 수 있습니다. 칸이 총 4개 있을 때, 효진이는
(1칸, 1칸, 1칸, 1칸)
(1칸, 2칸, 1칸)
(1칸, 1칸, 2칸)
(2칸, 1칸, 1칸)
(2칸, 2칸)
의 5가지 방법으로 맨 끝 칸에 도달할 수 있습니다. 멀리뛰기에 사용될 칸의 수 n이 주어질 때, 효진이가 끝에 도달하는 방법이 몇 가지인지 알아내, 여기에 1234567를 나눈 나머지를 리턴하는 함수, solution을 완성하세요. 예를 들어 4가 입력된다면, 5를 return하면 됩니다.

제한 사항
n은 1 이상, 2000 이하인 정수입니다.
입출력 예
n	result
4	5
3	3
입출력 예 설명
입출력 예 #1
위에서 설명한 내용과 같습니다.

입출력 예 #2
(2칸, 1칸)
(1칸, 2칸)
(1칸, 1칸, 1칸)
총 3가지 방법으로 멀리 뛸 수 있습니다.

-------------------------------------------------------------------------------------

def solution(n):
    # n이 1인 경우는 한 가지 방법밖에 없음
    if n == 1:
        return 1
    # n이 2인 경우는 두 가지 방법이 있음
    if n == 2:
        return 2
    
    # 결과를 1234567로 나눈 나머지를 구해야 하므로 MOD 상수 설정
    MOD = 1234567
    
    # dp 배열 초기화, n+1 크기로 생성 (0 ~ n까지 사용)
    dp = [0] * (n + 1)
    
    # 초기 조건 설정
    dp[1] = 1  # 1칸을 뛰는 한 가지 방법
    dp[2] = 2  # 1칸+1칸 또는 2칸을 뛰는 두 가지 방법
    
    # 동적 프로그래밍을 이용해 dp 배열 채우기
    for i in range(3, n + 1):
        # dp[i]는 dp[i-1] (마지막에 1칸을 뛰는 경우) + dp[i-2] (마지막에 2칸을 뛰는 경우)
        dp[i] = (dp[i-1] + dp[i-2]) % MOD
    
    # 최종적으로 dp[n] 값을 반환
    return dp[n]

# 테스트 예시
print(solution(4))  # 5를 반환해야 함
print(solution(3))  # 3을 반환해야 함
